[package]
name = "limitpush" # Todo
version = "0.1.0"
authors = ["heydocode <heydocode@outlook.fr>"] # Todo
edition = "2021"
publish = false
exclude = ["dist", "build", "assets", "credits"]

[workspace]
members = [
    "crates/audio", 
    "crates/camera_system", 
    "crates/debug", 
    "crates/player", 
    "crates/states", 
    "crates/ui", 
    "crates/window_manager", 
    "crates/world",
    "native/mobile/Cargo.toml"
]

[profile.dev.package."*"]
opt-level = 3

[profile.dev]
opt-level = 1

[profile.release]
opt-level = "s"
lto = true
codegen-units = 1
strip = true

[profile.dist]
inherits = "release"
opt-level = 3
lto = true
codegen-units = 1
strip = true

[features]
default = ["dev"]
dev = [
    "debug/dev"
]

[dependencies]
# Please don't forget the way by which the rust compiler works!
# If a dependency feature is set here, every internal crate of this
#   project will have this feature if it has this dependency!
# For the best readability of this project, there will be a mention
#   in all crates' Cargo.toml that need this feature to avoid the case
#   when a user just copies/pastes the whole crate into his project and
#   gets an unfixable error because of a missing feature (even if the
#   rust compiler should keep you aware from missing feature, sometimes
#   it can not happen..)
bevy = { version = "*", default-features = false, features = [
    # Needed by `debug` & `player` | Wireframe & PbrBundle require pbr
    "bevy_pbr",
    # Needed by `states` | TextBundle & TextStyle require bevy_text to work
    "bevy_text",
    # Needed by `states` | TextBundle require bevy_ui to work
    "bevy_ui",
    # Camera3dBundle with Tonemapping require tonemapping_luts to entirely work
    "tonemapping_luts",
    # Enable built in global state machines
    "bevy_state",
    # Enables multithreaded parallelism in the engine. Removing it forces all engine tasks to run on a single thread.
    "multi_threaded",
    # "webgl2", Use in the wasm native package
    # Provides rendering functionality
    "bevy_render",
]}
avian3d = { version = "*", default-features = false, features = [
    # "collider-from-mesh",
    # "debug-plugin",
    # "parallel",
    # "3d",
]}

audio = { path = "crates/audio" }
camera_system = { path = "crates/camera_system" }
debug = { path = "crates/debug" }
player = { path = "crates/player" }
states = { path = "crates/states" }
ui = { path = "crates/ui" }
window_manager = { path = "crates/window_manager" }
world = { path = "crates/world" }